---
title: "Generating interactive and individualized course content on time using Markdown, Python and JavaScript"
author: 
  - name: "Kwang Hyun Kim"
    email: "kkim@qcc.cuny.edu"
    affiliation: "Queensborough Community College"
date: 12/02/2022
execute:
  echo: false
slide-format: revealjs
format:
  revealjs: 
    keep-md: true # Debugging
    keep-ipynb: true # Debugging
    slide-number: true
    css: [lib/css/details.css,lib/css/extra_reveal.css]
    embed-resources: true
    standalone: true # One file
    controls: true
    preview-links: true
    link-external-newwindow: true
    transition: none
    theme: simple
    background-transition: none
    scrollable: true
    footer: <https://kwangkim.github.io/it22/>
    #width: 1920
    height: 1080
    margin: 0.05
---

## Goals

- Build interactive and individualized course contents
- Introduce Quarto system <https://quarto.org/> as a main tool
- [Markdown](https://quarto.org/docs/authoring/markdown-basics.html), [Python](https://www.python.org/) and [Observables Javascript](https://observablehq.com/)
- Output: [HTML](https://www.w3schools.com/html/), [PDF](https://www.adobe.com/acrobat/about-adobe-pdf.html)
- Publish to a Github page (<https://kwangkim.github.io/it22/>)
- Make randomized math exams with auto-generated solutions with Python
- Discuss current technical limitations and tips

::: {.content-hidden when-format="html"}
Hello html!
:::

---

## Quarto

- Open-source scientific and technical publishing system built on [Pandoc](https://pandoc.org)
- Create dynamic content with script
- (Backend Script) `Python`, `R` ,`Julia` (Choose one of them)
- (Frontend Script) [(Observable) `javascript`](https://observablehq.com/)
- (Extension for Panddoc) `lua`
- (Multiple outputs) `html`, `pdf`, `docx`, `pptx` and more.

## Setup

- We use `python` as a backend and `observable javascript` as a frontend
- We use [`vscode`](https://code.visualstudio.com/) as an editor with [quarto vscode-extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)
- We use [`xelatex`](https://www.latex-project.org/get/) for `pdf` output
- We demonstrate how to make an interactive`revealjs` slide 
- We demonstrate how to make an individual exam as a `pdf`

## Markdown

`Markdown` is basically a simple and readerable markup which can be converted into `html`. Quarto is based on [`Pandoc` markdown](https://pandoc.org/MANUAL.html#pandocs-markdown).

For example, the output of `*italics* and **bold**` is
*italics* and **bold**.

Link: [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html#text-formatting)

## [YAML](https://yaml.org/)

The document `yaml` contains options and `metadata`.
We can put options of a output `format`.

For `revealjs` slide,

```{yaml}
---
title: "revealjs demo"
format:
  revealjs: 
    slide-number: true
---
```

For [`pdf`](https://quarto.org/docs/output-formats/pdf-basics.html),
```{yaml}
---
title: "pdf demo"
format:
  pdf:
    documentclass: article
---
```
## (REVEALJS) How to make a slide

Each slide is defined with a level 2 heading (`##`).
```{.markdown}
---
format: revealjs
---
## Slide 1

Hello

## Slide 2

Bye
```

[Preview](slide1.html){target="_blank"}

## DEMO 1

Make a Trigometry lecture.

- [Layout and figures](https://quarto.org/docs/authoring/figures.html)
- [Panel tabset](https://quarto.org/docs/presentations/revealjs/index.html#tabsets)

Note: [We use a custom css for `details`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details)

## Observable Javascript (`ojs`)

- [Observable](https://observablehq.com/) is a platform where you can collaboratively explore, analyze, visualize, and communicate with `data` on the web
- `Observable notebooks` are made of `cell`s.
- `Cell` is `markdown`, `html` or `observable javascript`.
- [`Observable Javascript`](https://observablehq.com/@observablehq/observable-javascript) is almost javascript with [a automatic dataflow](https://observablehq.com/@observablehq/how-observable-runs).

Note: `ojs` is only working with `html` type output.

## How to use ojs in quarto

To embed a value from `ojs`, use `${expr}` where `expr` is a variable or expression ([inline code](https://quarto.org/docs/computations/execution-options.html#inline-code)).
To deliver a data from `python` to `ojs`, we use `ojs_define` function. 
```{python}
#| echo: true
# python code
p=1
ojs_define(y=p+1)
```

::: {.content-hidden when-format="pdf"}
```{ojs}
//| echo: true
// ojs code: ${x+y} ?
x=100
```
$x+y$ is ${x+y}. 
:::

## Interactive code: Reference angle

```{ojs}
//| echo: true
//| panel: center
//| layout-align: center
import {make_ref} from '@kkim/ma121'
ref120=make_ref(120) //${ref120.show()}
```

:::{layout="[1,1]"}
Please, move $\theta$ to see the corresponding reference angle of $\theta$.

<div>
${ref120.show()}
</div>
:::

Note: This `ojs` is made using [`Geogebra`](https://www.geogebra.org/).

## Hide `ojs` on `pdf` output

To prevent from running `ojs` for `pdf` output, 

we can hide `ojs` code using [`{.content-hidden when-format="pdf"}`](https://quarto.org/docs/authoring/conditional.html) with a block `:::  :::`

````{markdown}
::: {.content-hidden when-format="pdf"}
```{ojs}
//| echo: true
x=100
```
$x+y$ is ${x+y}. 
:::
````

## Separation of Concerns: [`include` shortcode](https://quarto.org/docs/authoring/includes.html)

Includes are a convenient way to re-use content across documents.
To include a file, add the `{{< include >}}` shortcode at the location in your document where you want it included:

``` markdown
{{{< include p1.qmd >}}}
```
## Demo1 files

- [demo11.qmd](demo11.qmd)
- [demo12.qmd](demo12.qmd)
- [p1.qmd](p1.qmd)
- [p2.qmd](p2.qmd)

## Demo 2: EXAM with pdf output

Use [`exam`](https://ctan.org/pkg/exam?lang=en) class in `latex` to make a short exam.

- We use [`matplotlib`](https://matplotlib.org/) to plot a right triangle.
- We use [`sympy`](https://www.sympy.org/en/index.html) for symbolic computations

## quarto extension: [`latex-environment`](https://github.com/qcckkim/latex-environment)

`Pandoc` ignores other formats within a Latex environment. This extension is useful when you'd like to share content between LaTeX and other formats, but need the content to be placed in an environment when emitting LaTeX.

### installation on a terminal

``` bash
quarto install extension qcckkim/latex-environment
```

## Example

``` markdown
---
format:
   html: default
filters:
   - latex-environment
environments: [center]
---
::: {.center}
The contents of this div will be output in a `center`
LaTeX environment, but will appear in HTML (and any other output 
format as a simple div with the class `center`)
:::
```

## Demo2 files

- [demo2.qmd](demo2.qmd)
- [q1.qmd](q1.qmd)
- [q2.qmd](q2.qmd)
- [q3.qmd](q3.qmd)
- [q4.qmd](q4.qmd)

## Current stability issues

- `quarto` is still in development.
- A code which works for `html` may not work for `revealjs`
- A code may not work with a particular setting
- Proper `spaces` matters. Please, check whether you put enough spaces among blocks.

## Advanced topic: Run observable js on python

Using [`playwright`](https://playwright.dev/python/docs/intro), we can run `ojs` or `js` code on `python`.

This example shows how to get SVG from a `python` code with [`jsxgraph`](https://jsxgraph.uni-bayreuth.de/wp/index.html) js library.

[`ojs2py.qmd`](ojs2py.qmd)


## QnA

Any question?


